{"path":"projects/nvim/resources/screenshots/Pasted image 20231022030319.png","text":"(= ~ : tmux: client — Konsole - v x ~/Documents/programing proje &src > @ main.cpp > fx gpuRender ela 0SAPI * < M x .cache 21 h ) run bool 2> Wl . git 0] h el vertices3 float * < B . github 19 std::this_thread::sleep_for(std::chrono::milliseconds(15));1 ICORVET o o Mol =15 M il Mo - N il < M .vscode 18 h el vertices2 float * - M assets 17 1 el indcies uint32 t * > W build 16 void-gpuRender(const-gpuRenderData-&sendor)1 fx keyListener void (const ke < W config 15 {1 fx mouseMove void (const mous < B Context 14 {1 fx mousePress void (const mou - B doc ils) static bool temp = false;1 f« mouseReleased void (const = B include 12 static bool tempFinsh -=-false;1 fx mouseScroll void (const mo < W output 11 static vaoIld shapeToRender;: f« windowResize void (const w 2> Msrc 10 static vaoIld shapeToRender2;1 f« windowClose void (surfacel - B submodules ] static -uniformBufferId UBO;1 fx focusSwap void (surfaceld) 2> M tests 8 R ) @ AR e F=T o Ko BEY EoTo [T gl K01 0T T (=Y ol fx cpuRender void (const cpuR - B vendor 7 static textureld testTexture;: £« gpuRender void (const gpuR O .clang-format 6 static stbi_uc-*data = nullptr;: fx consoleKeyWait void () .gitignore 5 3 ) o o R A X o TR TR W [} o T T [ KT Fmain int () .gitmodules 41 {} compile_commands. json 3 if (!temp): @ install.sh P {1 # LICENSE 1 temp = true;: < Makefile 115 sendor.api.pgetVao @ push.sh 1 EETIS) €0 README . md 2 shapeT [ESPIINGEtVas(VaoTd id) en(method) ™ vao * @ run.sh 3 shader [LSP] setVao(vao data) @ (Method) @ test.sh 4 testTe [LSP] deallocVao(vaoId id) @ (Method) O trace 5 UBO = [LSP] getShader(shaderId id) @ (Method) O trace.tracy 6 1 [LSP] getTexture(textureId id) @ (Method) & 7/ // sen [LSP] deallocShader(shaderId id) @ (Method) 8 // [LSP] setShader(shaderInfo data) @ (Method) ] // [LSP] deallocTexture(textureId id) @ (Method) 10 // [LSP] setTexture(textureInfo data) @ (Method) zeof(float)}, 11 // [LSP] getFramebuffer(framebufferId id) @ (Method) 12 // [LSP] deallocFramebuffer(framebufferId id) @ (Method) float)}, A 13 // }); [LSP] getUniformBuffer(uniformBufferId id) @ (Method) 14 1 [LSP] setFramebuffer(frameBufferInfo data) @ (Method) 15 // sen [LSP] allocVao(supportedRenderApis apiType) @ (Method) 16 // [LSP] allocShader(supportedRenderApis apiType) @ (Method) 17 // [LSP] deallocUniformBuffer(uniformBufferId id) @ (Method) 18 y// /s [LSP] setUniformBuffer(uniformBufferInfo data) ® (Method) zeof(float)}, 19 // [LSP] allocTexture(supportedRenderApis apiType) ® (Method) zeof(float)}, pi0] // [LSP] renderRequest(const renderRequestInfo &data) @ (Method) 21 // [LSP] allocFramebuffer(supportedRenderApis apiType) @ (Method) 22 // - }); [LSP] allocUniformBuffer(supportedRenderApis apiType) @ (Method) PERE! 24 sendor.api->setShader(: 25 {shaderToRender, - \"assets/shaders/vertex/texture.vert.spv\", \"assets/shaders/fragment/texture.frag.spv\"});: 26 stbi_set_flip_vertically_on_load(1);: 27 1 28 [ EYCRERES d RS GET XYY YA d- V] o Y4 T VA RSIVEER | T Wt [V]g T T=ToT) Rotel o= 1WA WY oR-Y-% o Yo Yo RARRR VA K f s IR T=R U3 PR Tl FoTo o TN TR0 I pA) textureInfo- tempTex(testTexture, - (uint32_t)width, (uint32_t)height, - textureFormat::RGB8);1 E0] tempTex.bufferToLoad =1 31 new- loadTextureRequst{0, -0, - (uint32_t)width, - (uint32_t)height, - textureFormat: :RGB8, - 0x1401, -data};1 32 1 33 sendor.api->setTexture(tempTex);1 EZ 35 float *temp-=-(float *)malloc(16);1 36 temp[0] =-0.5f;1 37 temp[1] -=-0.5f;1 VAR =T R | 1:1 ¥ vulkan > A2 main.cpp [+] utf-8 < A< G cpp 46% [No Name] [-] 1:1 -- INSERT -- Sun 03:03:08 : 1:nvim* 2 nvim- 3 fish 1 Dire Straits - Sultans Of Swing | 14% 00:22:54 | [ 1 2.7% 0.85 1.03 1.45","libVersion":"0.2.3","langs":"eng"}