{"path":"projects/nvim/resources/C++ Coding with Neovim - Prateek Raman - CppCon 2022.pdf","text":"1   W elcome everyone ! This is a talk on C++ coding with Neovim on the command line. I'm Prateek. ...... Speaker notes G R E E T I N G S !G R E E T I N G S ! B loom b e r g , N Y C P e r s on a l S e t u p C los e a p p r o x im a t ion a t wor k C + + Ap p lic a t io n D e v e lop e r 2   I work at Bloomberg Everything in this talk is based on the C++ setup I have at home, a close approximation of which I use at work as well I'm a regular C++ application developer , who just happens to be enthusiastic about his dev setup. Sometimes... Speaker notes 3   ... overly enthusiastic as well ! This is the current setup for this talk. Pause Before we start... Speaker notes 4   ... I have a confession Even though I've been using V im for more than a decade I still use Notepad++ sometimes Speaker notes Notepad++Notepad++ F a s t M in im a l E \u0000 c ie n t 5   Its fast minimal barely uses any resources But in my opinion its most important attribute which keeps making me coming back to it is that ... Speaker notes Notepad++Notepad++ G e t s out o f t h e w ayG e t s out o f t h e w ay 6   ... it gets out of the way when I'm using it.... it gets out of the way when I'm using it. This is more of an observation I had while preparing the slides for this talk... As I feel I have gravitated towards the current command line setup around Neovim for similar reasons Both the tangible ones like speed, minimalism and ef ficiency and this intangible thing where it gets out of way . With that, lets get started with the actual talk.With that, lets get started with the actual talk. Speaker notes Notepad++Notepad++ G e t s out o f t h e w ayG e t s out o f t h e w ay s/confession/observation/s/confession/observation/ 6.1  A G E N D AA G E N D A O v e r v ie w C on t e x t C om m a n d L in e E n v ir on m e n t C + + W or k \u0000 ows wit h N e ov im N e ovim S e t u p 7   This is what we'll be covering today . After a brief mention of some housekeeping items... I'll setup the context around why this is a talk on Neovim as opposed to V im. Then I'll talk about the command line setup I typically use for C++ using a toy project. Then we'll spend a lot of time on C++ W orkflows with Neovim via some live demos. Finally we'll see how one could get started with setting up Neovim to have a similar workflow I'd prefer to take questions at the end of the talk. So please take a note of the slide numbers on the bottom right corner if you want to ask something at the end. Speaker notes L S P & L a n g u a g e S e r v e rL S P & L a n g u a g e S e r v e r Request: 'textDocument/definition' Development Tool (eg Neovim) Response: Location C++ (clangd) Python (pyright) JavaScript/ TypeScript ... Developer T ool (Host) Language Server Protocol (JSON-RPC) Language Servers 8   One of the key developments over the past 6 years which enables most of the rich editing experience I'll be covering today is the Language Server ProtocolOne of the key developments over the past 6 years which enables most of the rich editing experience I'll be covering today is the Language Server Protocol A language server is a language specific server which understands your project at an abstract syntax tree and semantic level.A language server is a language specific server which understands your project at an abstract syntax tree and semantic level. Its analogous to a build system, and we'll see later how the C++ build system helps us setup the language for us, which is the de facto C++ language server. So a development tool, like Neovim, can talk to the langauge server over this protocol and ask for things likeSo a development tool, like Neovim, can talk to the langauge server over this protocol and ask for things like \"where is this function defined\" or \"where is this type declared\" \"Do you have any completion items for me at the current cursor location\" and then use that information to provide intellisense.and then use that information to provide intellisense. Neovim can do this because it has a built in LSP client which enables it to have intellisence like you would expect from any IDE.Neovim can do this because it has a built in LSP client which enables it to have intellisence like you would expect from any IDE. Y ou don't have to fully understand this to make sense of this talk. I'll just be using the terms LSP and language server throughout the talk.Y ou don't have to fully understand this to make sense of this talk. I'll just be using the terms LSP and language server throughout the talk. Speaker notes G O A L SG O A L S C om m a n d lin e e n v ir on m e n t a s a lt e r n a t iv e t o ID E s D e m on s t r a t e N e ov im 's T U Is ( T e r m in a l U s e r In t e r f a c e ) L S P in t e g r a t ion R ic h p lu g in e c os y s t e m P e e k b e h in d t h e c u r t a in 9   I hope by the end of this talk, the command line feels a bit more friendlier than before. Whether you consider it as an alternative to GUI based IDEs comes down to preferences. I also hope to show Neovim's fancy T erminal User Interfaces Its built in LSP integration as well as its rich plugin ecosystem, a lot of which are LSP aware and leverage the language server for their functionality . Along the way we'll also peek at a few things under the hood of the editor , which are typically hidden away from us when we're using an IDE. Speaker notes SC O P ESC O P E A s s u m e sA s s u m e s C + + k n owled g e C M a k e V C P K G E n v ir on m e n tE n v ir on m e n t Ubuntu 20.04 u n d e r W S L 2 / W in d ows S h ou ld wor k t h e s a m e An y L in u x d is t r ib u t ion M a c O S 10   I am going to assume some C++ knowledge, and some CMake knowledge, as this talk is primarily about how the many dif ferent tools invovled in C++ conding work together , as opposed to focusing on any one tool. I'm using Ubuntu 20.04 running within WSL2 on Windows for this talk. Everything I'm showing here should work on any flavour of linux as well as Mac. Speaker notes A G E N D AA G E N D A O v e r v ie w C om m a n d L in e E n v ir on m e n t C + + W or k \u0000 ows wit h N e ov im N e ovim S e t u p C on t e x t 1 1   Let us setup the context around why this talk is on Neovim. Speaker notes A G E N D AA G E N D A O v e r v ie w C om m a n d L in e E n v ir on m e n t C + + W or k \u0000 ows wit h N e ov im N e ovim S e t u p Context 1 1.1  C ONTE X TC ONTE X T V im V im ▶ N e ovim N e ovim t od a y 12   W e'll talk a bit about V im How Neovim came about And what the status quo with Neovim is today . Speaker notes  13   I'm sure everyone here has already heard of V im A lot of people's first interaction with V im is accidental, you know they probably ran git commit and immediately got trapped inside of a black screen where the cursor isn't even blinking, and the keys don't seem to work. This question on stackoverflow has 2.7 million views. This is a bit amusing to me, because from where I stand there is a very good reason for why that happens. And it is not V im's fault. If my git commit theory is correct this happens because of the mismatch between the defaults of git and vim. Let me explain... Speaker notes MOD A L E DI T I N GMOD A L E DI T I N G In s e r t m od e N or m a l m od e 14   V im's key innovation, which it inherits from V i, is that it's a modal editor . When we press keys on the keyboard and corresponding letters appear on screen, that happens in Insert mode. But when we launch V im, we're in Normal mode by default. In Normal mode we speak the V i language to interact with the Editor as a whole And we're operating at more than a character level granularity . W e can press one of these keys in Normal mode to go into Insert mode and then type whatever we want. W e have to press Escape to come out of Insert mode and back into Normal mode And to quit V im, we have to go into Command mode by typing a : (colon) and then give the command wq , which is short for write this file and quit vim. Speaker notes MOD A L E DI T I N GMOD A L E DI T I N G In s e r t m od e N or m a l m od e i , o / O , a / A f or N o rm a l -> In se rt 14.1  MOD A L E DI T I N GMOD A L E DI T I N G In s e r t m od e N or m a l m od e i , o / O , a / A f or N o rm a l -> In se rt Escape f or In se rt -> N o rm a l 14.2  MOD A L E DI T I N GMOD A L E DI T I N G In s e r t m od e N or m a l m od e i , o / O , a / A f or N o rm a l -> In se rt Escape f or In se rt -> N o rm a l : ( c olon ) f or N o rm a l -> C o m m a n d 14.3  MOD A L E DI T I N GMOD A L E DI T I N G In s e r t m od e N or m a l m od e i , o / O , a / A f or N o rm a l -> In se rt Escape f or In se rt -> N o rm a l : ( c olon ) f or N o rm a l -> C o m m a n d :write :quit :wq in s h or t 14.4  A L L T H I N G S V I MA L L T H I N G S V I M h t t p s :/ / g it h u b .c om / m h in z / v im -g a lo r eh t t p s :/ / g it h u b .c om / m h in z / v im -g a lo r e 15   I'll not be covering the V im language in this talk. This is the best resource I've found to understand V im comprehensively . What I will say is that if you are learning vim on purpose, what happens after a while is that you develop muscle memory to interact with the editor . And before you know it, your brain is doing it passively while you focus on the code actively . So apart from getting out of the way visually , it also does that for your attention span. There is a reason V im keybindings are available as a feature in almost every other editor I'm aware of, including all the W eb Browsers via plugins. So if V im is so good, then why is this talk about Neovim? W ell I personally don't see Neovim as a completely dif ferent thing from V im, like Notepad++ is. And I'm not being diplomatic here. Because when you see me talk about the features of Neovim in the coming slides, I'll organically use statements like \"this is a built-in vim keybinding\" or a \"this is standard vim feature\", even though I'm using Neovim. And that is because of the V im lineage which Neovim inherits, similar to the V i lineage, V im inherited. But for the technical reasons we'll have to revisit the history a bit Speaker notes V I M 2 0 1 3V I M 2 0 1 3 16   W ell, in 2013 I was using V im with Syntastic plugin to see errors in C++ code inline in the editor And the way it worked was, everytime I saved the file, it would run the compiler on that file, parse the output for any errors, and show me the errors inline. While the compiler ran, vim would freeze waiting for it to finish. And thats because V im wasn't concurrent back then. i.e. There was no concept of a background job. As you can imagine, this was a very disruptive workflow . Needless to say , I was always keeping an eye out for solutions. Speaker notes V I M 2 0 1 3V I M 2 0 1 3 V im + V im + S y n t a s t icS y n t a s t ic 16.1  V I M 2 0 1 3V I M 2 0 1 3 V im + V im + S y n t a s t icS y n t a s t ic S a v e \u0000 le -> C om p ile -> S h ow e r r o r s in lin eS a v e \u0000 le -> C om p ile -> S h ow e r r o r s in lin e 16.2  V I M 2 0 1 3V I M 2 0 1 3 V im + V im + S y n t a s t icS y n t a s t ic S a v e \u0000 le -> C om p ile -> S h ow e r r o r s in lin eS a v e \u0000 le -> C om p ile -> S h ow e r r o r s in lin e :w:w --> F r e e z e --> F r e e z e 16.3  V I M 2 0 1 3V I M 2 0 1 3 V im + V im + S y n t a s t icS y n t a s t ic S a v e \u0000 le -> C om p ile -> S h ow e r r o r s in lin eS a v e \u0000 le -> C om p ile -> S h ow e r r o r s in lin e :w:w --> F r e e z e --> F r e e z e N ot c on c u r r e n tN ot c on c u r r e n t P lu g in s r u n in U I t h r e a d 16.4  N E O V I MN E O V I M An n ou n c e d b y An n ou n c e d b y in J a n . 2 0 1 4 in J a n . 2 0 1 4 M od u la r/ E x t e n s ib le M od u la r/ E x t e n s ib le N e ovim c or e + N e ovim c or e + p r ot oc ol f or U Is p r ot oc ol f or U Is T h ia g o d e Ar r u d aT h ia g o d e Ar r u d a f or k of V imf or k of V im m s g p a c km s g p a c k 17   Neovim was announced by Thiago in 2014 after his ef forts to add async support to V im didn't get any results. Y ou can still visit that link to see his original fork of V im from 2014 with async support Its essentially a V im fork designed with modularity and extensibility in mind There is Neovim Core with a msgpack based protocol for UIs to interact with it. The first stable version of Neovim was released in November 2015. V im eventually added support for async jobs next year .V im eventually added support for async jobs next year . But for some reason...But for some reason... Speaker notes N E O V I MN E O V I M An n ou n c e d b y An n ou n c e d b y in J a n . 2 0 1 4 in J a n . 2 0 1 4 M od u la r/ E x t e n s ib le M od u la r/ E x t e n s ib le N e ovim c or e + N e ovim c or e + p r ot oc ol f or U Is p r ot oc ol f or U Is T h ia g o d e Ar r u d aT h ia g o d e Ar r u d a f or k of V imf or k of V im m s g p a c km s g p a c k 0.1.00.1.0 r e le a s e d N ov . 2 0 1 5 r e le a s e d N ov . 2 0 1 5 17.1  N E O V I MN E O V I M An n ou n c e d b y An n ou n c e d b y in J a n . 2 0 1 4 in J a n . 2 0 1 4 M od u la r/ E x t e n s ib le M od u la r/ E x t e n s ib le N e ovim c or e + N e ovim c or e + p r ot oc ol f or U Is p r ot oc ol f or U Is T h ia g o d e Ar r u d aT h ia g o d e Ar r u d a f or k of V imf or k of V im m s g p a c km s g p a c k 0.1.00.1.0 r e le a s e d N ov . 2 0 1 5 r e le a s e d N ov . 2 0 1 5 V im 8 .0 r e le a s e d S e p t . 2 0 1 6 ( a s y n c s u p p o r t )V im 8 .0 r e le a s e d S e p t . 2 0 1 6 ( a s y n c s u p p o r t ) 17.2  N E O V I MN E O V I M 18   ... I was definitely sold on the idea of Neovim, even though I didn't adopt it immediately .... I was definitely sold on the idea of Neovim, even though I didn't adopt it immediately . Speaker notes N E O V I M T O D A YN E O V I M T O D A Y Lua s c r ip t in g luajit is f a s t 🚀 vimscript s t ill s u p p or t e d 19   Neovim has come a long way since then, because... One of the key decision Thiago made with Neovim was to use lua as the scripting language, even though Vimscript would still work. The LSP client in Neovim is written in lua. This turned out to play a huge role as plugins written in lua feel like they are a core part of Neovim. They have access to all the same neovim core apis as the native Neovim UIs... ... and they can access the language server to provide enhanced features. Neovim also has treesitter support, which is a library for incrementally parsing a file, and I'll show why that is useful during the demos. Speaker notes N E O V I M T O D A YN E O V I M T O D A Y Lua s c r ip t in g luajit is f a s t 🚀 vimscript s t ill s u p p or t e d L S P c lie n t wr it t e n in Lua 💡 19.1  N E O V I M T O D A YN E O V I M T O D A Y Lua s c r ip t in g luajit is f a s t 🚀 vimscript s t ill s u p p or t e d L S P c lie n t wr it t e n in Lua 💡 Lua p lu g in s F e e l n a t iv e ✈ L S P a war e 🛸 19.2  N E O V I M T O D A YN E O V I M T O D A Y Lua s c r ip t in g luajit is f a s t 🚀 vimscript s t ill s u p p or t e d L S P c lie n t wr it t e n in Lua 💡 Lua p lu g in s F e e l n a t iv e ✈ L S P a war e 🛸 s u p p or t 🌲 s y n t a x h ig h lig h t s s e m a n t ic t e x t ob je c t s T r e e -s it t e r 19.3  S t a c k O v e r \u0000 ow S t a c k O v e r \u0000 ow D e v e lop e r S u r v e y 2 0 2 2D e v e lop e r S u r v e y 2 0 2 2 20   Its no wonder that Neovim came out as the most loved IDE in this year's Stack overflow developer survey , which was the 2nd consecutive year for that position. So this talk is about Neovim, because that is what I use, but I'm not the only one exited by it. Speaker notes A G E N D AA G E N D A O v e r v ie w C on t e x t C + + W or k \u0000 ows wit h N e ov im N e ovim S e t u p C om m a n d L in e E n v ir on m e n t 21   I'm not taking any questions here as so far what I've covered is mostly subjective. But I'd be happy to discuss anything covered so far in the hallway track. So lets talk about the command line environment next. Speaker notes A G E N D AA G E N D A O v e r v ie w C on t e x t C + + W or k \u0000 ows wit h N e ov im N e ovim S e t u p Command Line Environment 21.1  C OM M A N D L I N EC OM M A N D L I N E E N VIR ONM E N TE N VIR ONM E N T T e r m in a l + T m u x C + + P r oje c t N e ovim 22   I'm may cover some of the parts here only briefly as its mostly for building familiarity with the tools I'll be working with in addition to Neovim. Speaker notes  23   C L I T M U X 1C L I T M U X 1 This is a typical screen which I spend most of my time looking at when I'm working on a project. So you can imagine that I would want it to look a bit aesthetically pleasing. Pause I'm glad to have found that my wife likes this as well. Pause I recently gifted her a fancy colourful mechanical keyboard to see if I can nudge her in this direction. Not on any special occasion, just a random surprise. So we'll see. Okay , let us break down what we're looking at. This is Windows T erminal running a tmux session inside Ubuntu. I'll get to what tmux is in just a bit. Y ou'd probably use the GNome terminal on native Ubuntu or Alacritty or W ezterm or your terminal of choice. So we have a single tmux window with 2 panes, insdie of a tmux session. Speaker notes  24   C L I T M U X 2C L I T M U X 2 The top tmux pane is running Neovim When I'm working on code, I'm zoomed in to this pane so that I don't see any other panes. Y ou can see that the majority of that pane is just code and there is a single line at the bottom with some information about that code. I'm in normal mode I'm on the main branch The file name is app_main.cpp Its a UTF-8 encoded c++ file The cursor is on line 30, column 18 Speaker notes  25   C L I T M U X 3C L I T M U X 3 The bottom tmux pane is just the bash shell. Speaker notes T MUX - SE S S I O N S , W I N D O W S , P A N E ST MUX - SE S S I O N S , W I N D O W S , P A N E S 26   C L I T M U X 4C L I T M U X 4 So tmux is a terminal multiplexer . i.e. Rather than me running multiple instances of Window T erminal and then having a shell within those, it manages that for me. I'm typically always zoomed in into the Neovim tmux pane, or any other pane if I'm spending any significant amount of time in it. In the next 2 slides, I'll show a gif of this workflow in action, and you can see the keys I'm pressing to do everything in the top right corner . Speaker notes  27   I am opening another tmux window within the same tmux session. And then I split it vertically into 2 panes to have 2 shells. Next I'll do something more here Speaker notes  28   I switch to the left pane, open Neovim, copy paste a hello world program and save it. Then I switch to the right pane and run g++ to compile it and the run it. So tmux lets me stay within the command line environment and allows me to multi-task via a keyboard driven workflow . Both V im and Neovim have a T erminal mode which allows you do stay completely within Neovim. I haven't found a reason to use it yet as I already have a fluent tmux workflow . But if you're not used to tmux then that T erminal mode in Neovim should come in very handy . This will become more clear when I get to the demos. Okay , lets talk about the C++ project. Speaker notes C + + P R O J E C TC + + P R O J E C T Ad d 2 n u m b e r s S u b t r a c t 2 n u m b e r s 📂 . ├── 📄 CMakeLists . txt ├── 📄 README . rst ├── 📂 src ├── 📄 tasks.py ├── 📂 tests └── 📄 vcpkg.json h t t p s :/ / g it h u b .c om / v v n r a m a n / c p p c o n -2 0 2 2 -c p p -n e o v im -t o y -c a lch t t p s :/ / g it h u b .c om / v v n r a m a n / c p p c o n -2 0 2 2 -c p p -n e o v im -t o y -c a lc 29   I have a very simple toy C++ project which just does addition and subtraction on the command line. Speaker notes T O Y C A L C U L A T O RT O Y C A L C U L A T O R Ad dAd d S u b t r a c tS u b t r a c t ./usr/local/bin/calc --help A toy calculator program to demo Neovim on the command line Usage: calc [OPTIONS] SUBCOMMAND Options: -h,--help Print this help message and exit Subcommands: add Add 2 numbers sub Subtract numbers ./usr/local/bin/calc add 10 5 10 + 5 = 15 ./usr/local/bin/calc sub 10 5 10 - 5 = 5 30   This is what you see when you run the toy program A few things of note... Speaker notes C + + P R O J E C TC + + P R O J E C T CMakeCMake , , ninjaninja , , gcc-11gcc-11 31   It uses CMake to generate the build system, which in our case is ninja I have gcc-1 1 installed on the system and I'm using vcpkg to provide the dependencies of the project. I'm using a tool called invoke to drive the development workflow and that is where the tasks.py file comes in. A lot of times you may have see a Makefile or a shell script in a project to avoid having to type lengthy commands to build it. tasks.py has the same purpose here. Speaker notes C + + P R O J E C TC + + P R O J E C T CMakeCMake , , ninjaninja , , gcc-11gcc-11 vcpkg.jsonvcpkg.json cli11 fmt 31.1  C + + P R O J E C TC + + P R O J E C T CMakeCMake , , ninjaninja , , gcc-11gcc-11 vcpkg.jsonvcpkg.json cli11 fmt tasks.pytasks.py f or f or R u n s C M a k e c o n \u0000 g u r e , b u ild , in s t a ll in v ok ein v ok e 31.2  V C P K GV C P K G S e t u p S e t u p vcpkgvcpkg ( s u b m od u le p e r p r oje c t ) ( s u b m od u le p e r p r oje c t ) D e p e n d e n c ie s p in n e d b y d e f a u ltD e p e n d e n c ie s p in n e d b y d e f a u lt git submodule add https://github.com/microsoft/vcpkg.git git submodule update --init cd vcpkg ./bootstrap-vcpkg.sh -disableMetrics 32   This is just a reference slide, included here for completeness. I'm using vcpkg as a submodule in this project, and these are the steps you have to follow before we can use it. This way the dependencies remained pinned to whatever was present in the specific vcpkg commit I pulled. So I know that the project would always build even if I take a sabattical from it a couple of months and those dependencies may have been updated in a backwards incompabitle manner upstream. Speaker notes C MAK EC MAK E C M a k e C on \u0000 g u r e u s in g C M a k e C on \u0000 g u r e u s in g tasks.pytasks.py # From project root $ invoke config 33   So the first thing you have to do with CMake is to configure the project, which generates the build system for us. I used invoke to run the cmake configure step. Roughly speaking It creates an out of source build directory and cd s into it Then it runs cmake configure providing it a path to the vcpkg toolchain file Speaker notes C MAK EC MAK E C M a k e C on \u0000 g u r e u s in g C M a k e C on \u0000 g u r e u s in g tasks.pytasks.py # From project root $ invoke config R ou g h ly d oes t h e f ollowin gR ou g h ly d oes t h e f ollowin g # create unique build dir and cd to it cmake \\ -S path/to/project/ \\ -DCMAKE_TOOLCHAIN_FILE=path/to/project/vcpkg/scripts/buildsystems/vcpkg.cmake 33.1  C MAK EC MAK E vcpkg_installed 📂 build.ninja 📄 📂 build ├── 📄 build.ninja ├── 📄 compile_commands.json ◀ ├── 📂 src ├── 📂 tests ├── 📂 vcpkg_installed ◀ └── ...more... 34   This generates the following build folder . The vcpkg_installed folder is where all the dependencies I've specified in vcpkg.json get installed. W e also have this file called compile_commands.json , whats that. Speaker notes C MAK EC MAK E vcpkg_installed 📂 build.ninja 📄 📂 build ├── 📄 build.ninja ├── 📄 compile_commands.json ◀ ├── 📂 src ├── 📂 tests ├── 📂 vcpkg_installed ◀ └── ...more... compile_commands.json 📄 34.1  C O MPIL A T I O N D A TA B A S EC O MPIL A T I O N D A TA B A S E B u ild d ir e c t or yB u ild d ir e c t or y J s on C om p ila t ion D a t a b a s eJ s on C om p ila t ion D a t a b a s e cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ... # or CMAKE_EXPORT_COMPILE_COMMANDS=1 cmake ... ├── ... ├── 📄 compile_commands.json └── ...more... 35   That is a json compilation database produced by CMake if you do either of things as shown at the top here. Its a de-facto standard for providing information from the compiler around how each file in the project was compiled. I'm not getting into the details of whats in there, but I'll be happy to discuss that if we get time at the end. Speaker notes N E O V I M 🤝 C L A N G DN E O V I M 🤝 C L A N G D S ou r c e d ir e c t or yS ou r c e d ir e c t or y ├── 📂 src ├── 📂 tests ├── 📄 compile_commands.json ⇒ path/to/build/compile_commands.json ◀ └── ...more... 36   So all we need to do to make the Neovim lsp client connect to clangd C++ language server , is to have that complation database present in the root of our project. And all I did here was run invoke config , and it did a CMake configure, then it created this symlink in the source directory , and that made Neovim connect to clangd. Speaker notes N E O V I M 🤝 C L A N G DN E O V I M 🤝 C L A N G D S ou r c e d ir e c t or yS ou r c e d ir e c t or y ├── 📂 src ├── 📂 tests ├── 📄 compile_commands.json ⇒ path/to/build/compile_commands.json ◀ └── ...more... $ invoke config$ invoke config 36.1  N E O V I MN E O V I M N e ovim 0.7.2 B u ilt-in L S P c lie n t 🤯 N ot a b le P lu g in s P a c k a g e m a n a g e r C L I T ools in s t a lle r H a n d le s clangd in s t a lla t ion t e le s c op e t r ou b le n v im -c m p wh ic h -k e y p a c k e r m a s on 37   This is mostly a reference slide I wanted to highlight a couple of indispensable plugins. I'll bring them up again as I use them in the next section. mason is the plugin which installs the language servers on behalf of Neovim. If it wasn't clear , clangd is running locally on the system, same as Neovim. Speaker notes MNEMONI C SMNEMONI C S <Leader><Leader> - - <Space><Space> h t t p s :/ / x k c d .c o m / 1 9 1 /h t t p s :/ / x k c d .c o m / 1 9 1 / 38   Pause One last thing, before I switch to demos. One of the things you learn to do with V im and Neovim is to come up with your keybindings for the most common workflows, and you do that by having mnemonics you can remember for those keybindings. Y ou can come up with whatever keybinding you want, as long as you remember it. I look forward learning other people's mnemonics to see if they have a better one. V im has a concept of a <Leader> key which you can think of as a namespace for your own keybindings, so that they don't conflict with built-in vim keybinding. For me that is <Space> and I mention that because you'll be hearning me say <Leader> a lot during the demos, when I say what my mnemonics are. Speaker notes A G E N D AA G E N D A O v e r v ie w C on t e x t C om m a n d L in e E n v ir on m e n t N e ovim S e t u p C + + W or k \u0000 ows wit h N e ov im 39   Lets me take a look at the time. I should have 30-35 mins left right now . P A U S E F O R QUE S TI O N SP A U S E F O R QUE S TI O N S Speaker notes A G E N D AA G E N D A O v e r v ie w C on t e x t C om m a n d L in e E n v ir on m e n t N e ovim S e t u p C++ Work\u0000ows with Neovim 39.1  C + + W O RK F L O W S W I T HC + + W O RK F L O W S W I T H N E O VIMN E O VIM 40   Now on to the live demos where we get to play Donkey . I'll switch over to my T erminal, where everytime I fail terribly , I earn a letter . Lets see if I can avoid making an ass of myself. So I have 5 lives basically . I don't get a letter if its not my fault. And I'll decide whose fault it is. I'll also start a program which shows what keys I'm pressing on the top right corner , so that you can follow along. I'll also mention my mnemonics as I use my keybindings. Speaker notes O P E N F I L E , N O L S PO P E N F I L E , N O L S P L iv e d e m oL iv e d e m o 41   Move to Neovim pane Zoom tmux Mention z in Window name. Open netrw Open T elescope All of my telescope files related keybindings start with an f for file <Leader>fp - files in project This is an example of a T erminal User Interface, or T ext User Interface Zoom out a bit to show preview , then zoom back in T ype cpp Delete cpp , type main Open app_main.cpp Ask if everything is legible Is the font size good And this is the file you were seeing in the screenshot earlier . A file loading into neovim is called a buf fer. So you'll see me using the terms file and buf fer interchangeably . I'll talk more about that in just a bit. Next slide - LspInfo not working Speaker notes :LspInfo:LspInfo - N O T A T TA C H E D - N O T A T TA C H E D L iv e d e m oL iv e d e m o 42   No Lsp attached <Leader>fzv - fuzzy find clangd.lua , show compile_commands.json root configuration for clangd. I don't want to see errors unnecessarily . Speaker notes T R E E - SI T T E R H I G H L I G H T I N GT R E E - SI T T E R H I G H L I G H T I N G L iv e d e m oL iv e d e m o 43   Enable/disable highlight :TSBufToggle highlight Different kinds of identifiers are highlighted using dif ferent colours, because treesitter is doing the highlighting based on the abstract syntax tree. Use treesitter vif inside add_number_options() to select everthing in the function. Mention that it works without Lsp T reesitter can do a lot more, and there are plugins which use it provide additional features. Speaker notes P R O J E C T N A V I G A T I O NP R O J E C T N A V I G A T I O N L iv e d e m oL iv e d e m o 44   Switch over to the configured branch Open Neovim Open netrw Open T elescope T ype cpp Delete cpp , type main Open app_main.cpp Zoom out a bit to show preview , then zoom back in Show clangd status on the bottom right corner Close Neovim, rm -rf ./.cache Open Neovim vim, use telecope to open app_main.cpp Speaker notes :LspInfo:LspInfo L iv e d e m oL iv e d e m o 45   Show LspInfo Mention clangd attaches to the buf fer Speaker notes B UFFE R , F I L E , W I N D O W A N D TA B SB UFFE R , F I L E , W I N D O W A N D TA B S L iv e d e m oL iv e d e m o 46   I mentioned earlier that a file loaded into V im is called a buf fer. But what you're seeing here is a window , and in V im, a window is a view over that buf fer. Kind of like std::span is a view over a std::vector Y ou can have multiple windows with a view over the same buf fer. Split Horizontal split And then you can have tabs. Open adder.cpp gt and gT Goto tab In V im, in general capital letters go in the reverse direction of their lowercase counterparts. Speaker notes I N T E L L I SE N S E - A D D M U LT I P LYI N T E L L I SE N S E - A D D M U LT I P LY L iv e d e m oL iv e d e m o 47   Implement multiply in 2 ways First without LSP using regular vim Use :LspStop to stop lsp Copy sub add_subcommand With lsp Delete the line, typing everything out manually . Mention live error Show intellisence working Add a few more errors in the code and show that we get real time feedback on the errors. There are plenty of ways to do the same things in Neovim... Speaker notes C L A N G F O R M A TC L A N G F O R M A T L iv e d e m oL iv e d e m o 48   <Leader>gf = Go format Make app.add_subcommand(\"mul\", \"Multi...\") break at . and , and auto-format. I also have a .clang-format file in the root of the repo. clangd already has an integration with clang-format and I can format the buf fer by pressing my keybinding for it. Speaker notes N A V I G A T E B E T W E E N D I A G N O S T I C SN A V I G A T E B E T W E E N D I A G N O S T I C S L iv e d e m oL iv e d e m o 49   Lets created a few more trivial errors Neovim has a unified diagnostics api which makes the display or errors, warnings, hints unified. I'm configured moving between diagnostics to ]d and [d d for diagnostics Diagnostics is a general term which refers to errors, warnings as well as hints. One of the hints you're seeing is actually coming from clang-tidy because clangd already has that integrated into it. W e'll revisit the fix available piece in just a bit. I have 1 more thing to show before that. Speaker notes C L A N G -T I D Y I N T E G R A T I O NC L A N G -T I D Y I N T E G R A T I O N L iv e d e m oL iv e d e m o 50   Show hints Speaker notes T R O UBL E I N T E G R A T I O NT R O UBL E I N T E G R A T I O N L iv e d e m oL iv e d e m o 51   Modern alternative for quickfix/location list, which are really hard to navigate around. Everyone uses legendary V im plugin author T im Pope's unimpaired plugin to navigate quickfix lists. W e don't have to get into what those are, I'm just going to show the T rouble plugin. First of all, great job with the name \"T rouble\" I'm using trouble's suggested keybindinds <Leader>xd - x for error , d for document <Leader>xx - x for error , one more x for in project. Built-in keybindinds which make sense to me. Show what trouble does based on the previous slide Speaker notes C O DE A C T I O N SC O DE A C T I O N S L iv e d e m oL iv e d e m o 52   Now lets go ahead and fix those errors. LSP suggests code actions to us as well for trivial errors. <Leader>ca W e're halfway through the demo. Let me see if can pause for questions. Speaker notes G O T O DE F I N I T I O N / D E C L A R A T I O NG O T O DE F I N I T I O N / D E C L A R A T I O N L iv e d e m oL iv e d e m o 53   Now lets see how we would explore the codebase. <Leader>gd - Go to definition <Leader>gD - Go to declaration <Leader>gt - Go to type declaration Ctrl+O and Ctrl+I Lets also get rid of the diagnostics here Fix nested namespace being contatenated Fix trailing return type Fix comment being incorrect because toddlermath namespace comment got deleted Show header-cpp switch to fix the remaining diagnostic I could bring up telescope and type add.h to go to that file. But clangd provides a non-lsp feature to switch between header and cpp. Speaker notes S W I T C H B E T W E E N H E A D E R / C P PS W I T C H B E T W E E N H E A D E R / C P P L iv e d e m oL iv e d e m o 54   <Leader>gs - Go switch Switch to header T ypically what I do is I'll split the buf fer into another window , and run <Leader>gs in that, so that I have both the header and cpp files opened at the same time. Speaker notes F I N D R E F E R E N C E SF I N D R E F E R E N C E S L iv e d e m oL iv e d e m o 55   Open adder I have this variable called m_nums here which is not the best name for this variable. I want to rename this. Before I did that I want to just see how many places its being referenced from <leader>rf - references Speaker notes R E F A C T O RR E F A C T O R L iv e d e m oL iv e d e m o 56   <Leader>rn - Rename Rename m_nums to m_numbers I get errors That is because neovim has updated the buf fers where that variable was being referenced but the buf fers haven't been saved yet. Show trouble window again :wall - write all Speaker notes DOCUMENT S Y M B O L SDOCUMENT S Y M B O L S L iv e d e m oL iv e d e m o 57   Open adder <leader>lds Speaker notes R UN E X E C U TA B L ER UN E X E C U TA B L E L iv e d e m oL iv e d e m o 58   TBD Speaker notes MULT I - L A N G U A G E S E T U PMULT I - L A N G U A G E S E T U P L iv e d e m oL iv e d e m o 59   Since I opened a lot of files, I'm going to just quit vim to get a fresh start for the next piece. One of the things I mentioned earlier was that the language server attached to buf fer, rather than an instance of neovim. Let me open the tasks.py file which is driving my cmake workflow . Show tasks.py , show :LspInfo There is a python language server attached to this buf fer. Everything I show for C++, except for clang-format and clang-tidy will work here as well. Show <leader>lds for symbols in the current project Show do_config() Speaker notes MULT I - L A N G U A G E S E T U PMULT I - L A N G U A G E S E T U P T h e s a m e s e t u p wor k s wh e t h e r y o u 'r e wo r k in g o n R u s t , G o la n g ,T h e s a m e s e t u p wor k s wh e t h e r y o u 'r e wo r k in g o n R u s t , G o la n g , J a v a S c r ip t / T y p e S c r ip t , Z ig , e t c ...J a v a S c r ip t / T y p e S c r ip t , Z ig , e t c ... 60   So those were all the demos I wanted to show . I'll switch over to the slides now . Close carnac Speaker notes DE B UG G I N GDE B UG G I N G G d b T a lk s b y G r e g L a w f r om C p p C on , s e a r c h on Y ou T u b e B a c k t o B a s ic s - D e b u g g in g b y M ik e Shah , C p p C on 2 0 2 2 D e b u g Ad a p t e r P r ot oc ol n v im -d a p 61   One thing you may have noticed is that I didn't cover visual debugging using Neovim. This is primarily because I use gdb whenever I need to debug a task. There are some really good talks on gdb by Greg Law , including one on Friday , and there was a talk by Mike Shah yesterday . But like LSP, there is something called the Debug Adapter Protocol and there is a plugin called nvim-dap which can provide visual debugging. I haven't tried it out, so I'm not going to be covering it here. Speaker notes A G E N D AA G E N D A O v e r v ie w C on t e x t C om m a n d L in e E n v ir on m e n t C + + W or k \u0000 ows wit h N e ov im N e ovim S e t u p 62   Alright we're almost at the final stretch here. P A US E F O R Q UE S T I O N SP A US E F O R Q UE S T I O N SP A US E F O R Q UE S T I O N SP A US E F O R Q UE S T I O N SP A US E F O R Q UE S T I O N SP A US E F O R Q UE S T I O N SP A US E F O R Q UE S T I O N SP A US E F O R Q UE S T I O N SP A US E F O R Q UE S T I O N SP A US E F O R Q UE S T I O N SP A US E F O R Q UE S T I O N SP A US E F O R Q UE S T I O N S Speaker notes A G E N D AA G E N D A O v e r v ie w C on t e x t C om m a n d L in e E n v ir on m e n t C + + W or k \u0000 ows wit h N e ov im Neovim Setup 62.1  N E O VIM S E T U PN E O VIM S E T U P N e ovim c on \u0000 g V im ➡ N e ovim L u a 63   Lets talk about how you may get started with Neovim First we'll cover what one might do if they're coming to Neovim from any other editor apart from V im. Then we'll talk about how an existing vim user would give Neovim a try . And finally we'll talk a bit about lua Speaker notes N E O V I M C O N F I GN E O V I M C O N F I G U n d e r U n d e r $HOME$HOME on L in u x , on L in u x , %USERPROFILE%USERPROFILE on W in d ows on W in d ows 📂 .config └── 📂 nvim └── 📄 init.lua ⬅ k ic k s t a r t .n v im ls p -z e r o 64   When you launch Neovim, it reads this config file present at .config/nvim/init.lua inside of your $HOME folder . I'll highly recommend the kickstart.nvim project to get started with a minimal config, and then build upon it over time. There is also this LspZero project, which is a bit more feature rich then kickstart.nvim . Speaker notes N E O V I M C O N F I G F R O M S C R A T C HN E O V I M C O N F I G F R O M S C R A T C H U n d e r U n d e r $HOME$HOME on L in u x , on L in u x , %USERPROFILE%USERPROFILE on W in d ows on W in d ows init.luainit.lua c on t e n t s c on t e n t s 📂 .config └── 📂 nvim ├── 📄 init.lua ⬅ └── 📂 lua └── 📄 weekend.lua require ( \"weekend\" ) 65   But if you were to do this from scratch, this is the structure I'd recommend so that you can do it in a modular fashion. That require(\"weekend\") line will include the weekend.lua file in that lua folder as a module in your init.lua . This is the standard way you includes modules in lua If it wasn't clear , I'd recommend setting a weekend aside before you proceed with this option. Speaker notes N E O V I M DI S T R I B U T I O N SN E O V I M DI S T R I B U T I O N S L u n a r V im N v C h a d 66   If you don't want to spend any time configuring anything, then I'll suggest these Neovim distributionsIf you don't want to spend any time configuring anything, then I'll suggest these Neovim distributions either LunarV im or NvChad which include the kitchen sink and come with their own set of configurations and keybindings.which include the kitchen sink and come with their own set of configurations and keybindings. So this is what you would do if you were coming to Neovim from any other editor .So this is what you would do if you were coming to Neovim from any other editor . But if you're already using V im, and want to try out Neovim...But if you're already using V im, and want to try out Neovim... Speaker notes V I M ➡ N E O V I MV I M ➡ N E O V I M U s e N e ovim wit h y ou r U s e N e ovim wit h y ou r $HOME/.config/nvim/init.vim$HOME/.config/nvim/init.vim T r y L S P in t e g r a t ion , L u a p lu g in sT r y L S P in t e g r a t ion , L u a p lu g in s M ove t o M ove t o init.luainit.lua 💰💰💰💰💰💰 e x is t in g e x is t in g .vimrc.vimrc set runtimepath^=~/. vim runtimepath+=~/. vim /af let &packpath = &runtimepath source ~/.vimrc 67   If you're already using V im and would like to try out Neovim, you can get started with just these 3 lines here. Neovim will load your existing vimrc and existing plugins. After a while if you do decide to stay , you can switch over to the lua based config. I personally have kept my V im and Neovim config separate as I'd stay with Neovim going forward. Speaker notes L U AL U A local telescope_builtin = require ( \"telescope.builtin\" ) vim.keymap.set({ \"n\" }, \"<leader>lds\" , function () telescope_builtin.lsp_document_symbols() end , { buffer = bufnr }) 68   I'm plesantly surprised with how simple it was for me to pick up lua, without any experience with it prior to using Neovim. Its a very small and simple language with a wide acceptance already as an embeddable language. Its used in redis for scripting. Here is the keybinding I created to show all the symbols in the current file via telescope, as I showed earlier . So whats happening here is I'm declaring a local variable I'm setting a function to be called when those keys are pressed. And lua creates a closure around that local variable for us. This is very understanable. And I never considered writing my own plugin in V imscript when I was using V im, but I do see myself doing more and more with lua to personalize Neovim. Speaker notes L U AL U A local telescope_builtin = require ( \"telescope.builtin\" ) vim.keymap.set({ \"n\" }, \"<leader>lds\" , function () telescope_builtin.lsp_document_symbols() end , { buffer = bufnr }) D e c la r e loc a l v a r ia b leD e c la r e loc a l v a r ia b le 68.1  L U AL U A local telescope_builtin = require ( \"telescope.builtin\" ) vim.keymap.set({ \"n\" }, \"<leader>lds\" , function () telescope_builtin.lsp_document_symbols() end , { buffer = bufnr }) D e c la r e loc a l v a r ia b leD e c la r e loc a l v a r ia b le S e t f u n c t ion t o b e c a lle d wh e n k e y p r e s s e dS e t f u n c t ion t o b e c a lle d wh e n k e y p r e s s e d 68.2  L U AL U A local telescope_builtin = require ( \"telescope.builtin\" ) vim.keymap.set({ \"n\" }, \"<leader>lds\" , function () telescope_builtin.lsp_document_symbols() end , { buffer = bufnr }) D e c la r e loc a l v a r ia b leD e c la r e loc a l v a r ia b le S e t f u n c t ion t o b e c a lle d wh e n k e y p r e s s e dS e t f u n c t ion t o b e c a lle d wh e n k e y p r e s s e d L u a a u t om a t ic a lly c r e a t e s c lo s u r e wit h lo c a l v a r ia b leL u a a u t om a t ic a lly c r e a t e s c lo s u r e wit h lo c a l v a r ia b le 68.3  N E O V I M L U A R E S O U R C E SN E O V I M L U A R E S O U R C E S TJ D e v r ie s & B a s h b u n n i TJ D e v r ie s & B a s h b u n n i T e le s c op e a n d N e ov im in t r o N e ovim L u a P lu g in F r om S c r a t c h 69   I learnt a lot about Neovim and Lua from TJ Devries Y ouT ube channel, specially the long form videos where he is teaching his friend bashbunni about Neovim. He is one of core developers of Neovim and he wrote the initial LSP client as well as the telescope plugin. And she is new to Neovim so she asks the kind of questions I would have had if I was getting started and thats what made those videos so useful. Speaker notes F E N N E LF E N N E L 70   One interesting thing I discovered while learning lua was that there is flavour of lisp called \"Fennel\" which transpiles to lua.One interesting thing I discovered while learning lua was that there is flavour of lisp called \"Fennel\" which transpiles to lua. So if you're on of those people who like to configure your editor using a lisp, then Neovim is for you !So if you're on of those people who like to configure your editor using a lisp, then Neovim is for you ! PausePause before end before end Speaker notes F E N N E LF E N N E L L is p 70.1  F E N N E LF E N N E L L is p T r a n s p ile s t o L u a 70.2  F E N N E LF E N N E L L is p T r a n s p ile s t o L u a E m a c s L is p u s e r s r e joic e ! 70.3  TH A N K Y O U 🎉TH A N K Y O U 🎉TH A N K Y O U 🎉TH A N K Y O U 🎉TH A N K Y O U 🎉TH A N K Y O U 🎉TH A N K Y O U 🎉TH A N K Y O U 🎉TH A N K Y O U 🎉TH A N K Y O U 🎉TH A N K Y O U 🎉TH A N K Y O U 🎉 71   That's the end of my talk Thank you for coming. Speaker notes Q UE S T I O N S ?Q UE S T I O N S ? h t t p s :/ / g it h u b .c om / v v n r a m a n / n e o v im -c o n \u0000 gh t t p s :/ / g it h u b .c om / v v n r a m a n / n e o v im -c o n \u0000 g h t t p s :/ / g it h u b .c om / v v n r a m a n / d o t \u0000 le sh t t p s :/ / g it h u b .c om / v v n r a m a n / d o t \u0000 le s w w w .T e c h At B loom b e r g .c om / c p lu s p lu sw w w .T e c h At B loom b e r g .c om / c p lu s p lu s 72 ","libVersion":"0.2.3","langs":""}